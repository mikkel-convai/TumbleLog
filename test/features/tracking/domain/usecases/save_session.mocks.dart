// Mocks generated by Mockito 5.4.4 from annotations
// in tumblelog/test/features/tracking/domain/usecases/save_session.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tumblelog/core/entities/session_entity.dart' as _i5;
import 'package:tumblelog/core/entities/skill_entity.dart' as _i6;
import 'package:tumblelog/features/tracking/domain/repositories/session_repository.dart'
    as _i2;
import 'package:tumblelog/features/tracking/domain/usecases/save_session_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSessionRepository_0 extends _i1.SmartFake
    implements _i2.SessionRepository {
  _FakeSessionRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SaveSessionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveSessionUseCase extends _i1.Mock
    implements _i3.SaveSessionUseCase {
  MockSaveSessionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SessionRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSessionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.SessionRepository);

  @override
  _i4.Future<void> execute({
    required _i5.SessionEntity? session,
    required List<_i6.SkillEntity>? skills,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #session: session,
            #skills: skills,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
